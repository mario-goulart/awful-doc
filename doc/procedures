=== List of procedures and macros


==== Miscellaneous

===== {{++}}
<procedure>(++ string1 string2 ... stringn)</procedure>

A shortcut to {{string-append}}.

This procedure has been deprecated in awful 0.36 and will be removed
in future versions.


===== {{concat}}
<procedure>(concat args #!optional (sep ""))</procedure>

Convert {{args}} to string and intersperse the resulting strings with {{sep}}.


This procedure has been deprecated in awful 0.36 and will be removed
in future versions.


===== {{awful-version}}
<procedure>(awful-version)</procedure>

Return the awful version (a string).

===== {{awful-resources-table}}

Return the resources table used by awful.  The resources table is
represented by a hash table whose format is described below:

; keys: lists in the following format: {{(path-matcher vhost-root-path method)}}. {{path-matcher}} is the first argument given to {{define-page}} and can be either a string, a regular expression object or a procedure. {{vhost-root-path}} is the documents root path for the virtual host and is a string.  {{method}}, a symbol, is the HTTP method bound to the resource.

; values: procedures representing the page handlers (the second argument given to {{define-page}}).


==== JavaScript

===== {{include-javascript}}
<procedure>(include-javascript . files)</procedure>

A shortcut to {{(<script> type: "text/javascript" src: file)}} for
each file in {{files}}.


===== {{add-javascript}}
<procedure>(add-javascript . code)</procedure>

Add arbitrary JavaScript code to the pages defined by {{define-page}}
and {{define-session-page}}.

Note that the {{literal-script/style?}} parameter may affect special
characters in JavaScript code.


==== CSS
===== {{add-css}}
<procedure>(add-css . code)</procedure>

Add arbitrary CSS code to the pages defined by {{define-page}}
and {{define-session-page}}.

Note that the {{literal-script/style?}} parameter may affect special
characters in CSS code.

This procedure was introduced in version 0.39.


==== Debugging

===== {{debug}}
<procedure>(debug . args)</procedure>

Print {{args}}, concatenated, to the file {{debug-file}}.


===== {{debug-pp}}
<procedure>(debug-pp arg)</procedure>

Pretty-print {{arg}} to the file {{debug-file}}.



==== Sessions and authentication

===== {{$session}}
<procedure>($session var #!optional default)</procedure>

Return the value of {{var}} in the session (or {{default}} if {{var}}
does not exist or is {{#f}}).


===== {{$session-set!}}
<procedure>($session-set! var #!optional val)</procedure>

If {{var}} is a quoted symbol, set the value of {{var}} to {{val}}.
If {{val}} is not provided, {{var}} will have its value set to {{#f}}.

{{var}} can be an alist mapping session variable names to their
corresponding values.

Examples:

<enscript highlight=scheme>
($session-set! 'foo "foo value")

($session-set! '((foo . "foo value")
                 (bar . "bar value")
                 (baz . "baz value")))
</enscript>


===== {{link}}
<procedure>(link url text . rest)</procedure>

Return a session-aware HTML code for a link, using the {{<a>}}
procedure from [[/egg/html-tags|html-tags]].

The {{rest}} arguments are the same as the ones for the {{<a>}}
procedure from [[/egg/html-tags|html-tags]], plus the following:

; {{no-session}} : a boolean.  If {{#t}}, forces {{link}} to ignore the session even when {{enable-session}} is {{#t}}.

; {{arguments}} : an alist mapping variable names to their corresponding values, to be passed to uri-common's {{form-urlencode}} procedure.
; {{separator}} : the value to the {{separator}} keyword argument to be passed to to uri-common's {{form-urlencode}} procedure.

When {{enable-session}} is {{#t}}, {{link}} automatically encodes the session identifier in the URI (unless {{no-session}} is {{#t}}).


===== {{form}}
<procedure>(form contents . rest)</procedure>

Return a session-aware HTML code for a form, using the {{<form>}}
procedure from [[/egg/html-tags|html-tags]].

The {{rest}} arguments are the same as the ones for the {{<form>}}
procedure from [[/egg/html-tags|html-tags]], plus {{no-session}}, a
boolean.  If {{no-session}} is {{#t}}, it forces {{form}} to ignore
the session even when {{enable-session}} is {{#t}}.

When {{enable-session}} is {{#t}}, {{form}} automatically generates a
hidden input field to pass the session identifier (unless
{{no-session}} is {{#t}}).


===== {{define-login-trampoline}}
<procedure>(define-login-trampoline path #!key vhost-root-path hook)</procedure>

Define a trampoline -- an intermediate page accessed when redirecting
from the login page to the main page.

===== {{login-form}}
<procedure>(login-form #!key (user-label "User: ") (password-label "Password: ") (submit-label "Submit") (refill-user #t))</procedure>

Return a user/password login form (e.g., for using in authentication pages).

When the {{refill-user}} is {{#t}}, the User field is refilled with
the value from the {{user}} query string value when either the session
or the password is invalid.

The {{user-label}}, {{password-label}} and {{submit-label}} keyword
parameters are labels to be used for the user, password and submit
form widgets, respectively.



==== Request variables and values

===== {{$}}
<procedure>($ var #!optional default/converter)</procedure>

Return the HTTP request value for the given variable {{var}}.  The
variable is looked for in both the query string (GET method) and
request body (e.g., POST method).  See the documentation for the
procedure returned by
[[/eggref/4/spiffy-request-vars|spiffy-request-vars]]'s
{{request-vars}} for further details.


===== {{with-request-variables}}
<macro>(with-request-variables (var1 var2 ... varn) expression1 ...)</macro>

A wrapper around [[/egg/spiffy-request-vars|spiffy-request-vars]]'s
{{with-request-vars*}}.

All the [[/egg/spiffy-request-vars|spiffy-request-vars]]'s converter
procedures are exported, for convenience.


==== Database access

===== {{$db}}
<procedure>($db q #!key default values)</procedure>

Execute the given query ({{q}}) on the database and return the result
as a list of lists or {{default}} if the result set is empty.

The {{values}} keyword parameter (a list) is a list of values to
replace the placeholders in the query.

Example:

<enscript highlight=scheme>
($db "insert into foo (bar, baz) values (?, ?)" values: '("bar-val" "baz-val"))
</enscript>


===== {{$db-row-obj}}
<procedure>($db-row-obj q)</procedure>

Execute the given query {{q}} on the database and return an
one-argument procedure which takes as argument the name of the
database field to get the value.

Example:

<enscript highlight=scheme>
(let ((& ($db-row-obj "select full_name, phone from users where user_id=1")))
  (<p> "Full name: " (& 'full_name))
  (<p> "Phone: " (& 'phone)))
</enscript>

''Warning'': currently {{$db-row-obj}} is only implemented for
PostgreSQL databases.


===== {{sql-quote}}
<procedure>(sql-quote . data)</procedure>

Escape and quote the concatenation of {{data}} to be used in SQL queries.

''Warning'': for SQLite databases, {{sql-quote}} just replaces {{'}}
by {{''}} and quotes the {{data}}.  For PostgreSQL, {{sql-quote}}
quotes the result of {{escape-string}}.

Consider using the API for placeholders of your favorite database egg
instead of {{sql-quote}} whenever possible.


==== Pages

===== {{define-page}}
<procedure>(define-page path-matcher handler #!key css title doctype headers charset no-ajax use-ajax no-template no-session no-db no-javascript-compression method use-sxml)</procedure>

Define an awful page.

{{path-matcher}} matches requested paths.  It can be represented by three types:
; string: a literal path. When the path matcher is a string, the handler procedure must be a thunk.
; regex: a regular expression to match the requested path (regexes created by both regex egg and irregex unit are valid values).  When the path matcher is a regular expression, the page handler procedure must be a one-argument procedure which will be given the requested path.
; procedure: a one-argument procedure to match the requested path (feature introduced in awful 0.35). If the procedure matches the requested path, it should return a list to be applied to the page handler.  When the path matcher is a procedure, the arity of the page handler procedure must match the length of the list returned by the path matcher. {{#f}} indicates that there was no match.  Values which are not {{#f}} or a list will cause an invalid argument type error.


{{handler}} should return either a string or a no-argument procedure.
If it returns a string, it will be given as argument to
{{(page-template)}}, unless {{no-template}} is not false. If
{{handler}} returns a procedure (feature introduced in awful 0.35),
awful won't do anything besides evaluating the returned procedure.  It
can be useful, for example, to serve static files out of the web
server document directory (see the examples in this section).

{{use-sxml}} (boolean): specifies whether awful should assume that the
handler produces SXML code or strings.  In case the handler produces
SXML code, the parameter {{sxml->html}} yields the procedure used to
generate HTML out of SXML.

{{method}} (a symbol or a list) indicates the HTTP method to be used
(e.g., {{GET}}, {{POST}}, {{PUT}}).  {{method}} can also be a list of
methods.  In this case, awful will define a page for each method of
the list.  Methods are case-insensitive.  Pages that use different
methods can use the same path.  The default value is {{(GET HEAD)}}
(prior to version 0.39, the default value was just {{GET}}).

The {{css}}, {{title}}, {{doctype}}, {{headers}} and {{charset}}
keyword parameters have the same meaning as {{html-page}} (from the
[[/egg/html-utils|html-utils]] egg).

If {{no-ajax}} is {{#t}}, it means that the page won't use ajax, even
if the {{enable-ajax}} parameter is {{#t}}.

If {{use-ajax}} is {{#t}}, it means that the page will be linked to
the ajax library, even if the {{enable-ajax}} parameter is {{#f}}.

If {{no-template}} is {{#t}}, it means that no page template (see the
{{page-template}} parameter) should be used.

If {{no-session}} is {{#t}}, it means that the page should not use session.

If {{no-db}} is {{#t}}, it means that the page should not use the
database, even when database usage is activated by {{enable-db}} and
{{db-credentials}} is not {{#f}}.

If {{no-javascript-compression}} is {{#t}} the JavaScript code for the
page is not compressed, even when {{enable-javascript-compression}} is
not {{#f}}.

Examples:

<enscript highlight=scheme>
(use awful
     srfi-1  ;; for filter-map
     regex   ;; for regexp
     spiffy) ;; for send-static-file

(enable-sxml #t)

;;
;; Path matcher as a string
;;

;; http://host:port/foo => "bar"
(define-page "/foo"
  (lambda ()
    "bar"))


;;
;; Path matcher as a regular expression
;;

;; http://host:port/add/1/2/3 => 6
(define-page (regexp "/add/.*")
  (lambda (path)
    (let ((numbers (filter-map string->number (string-split path "/"))))
      `(,(apply + numbers)))))


;;
;; Path matchers as procedures
;;

(define (ticket-id path)
  (and (string-prefix? "/ticket/" path)
       (and-let* ((tokens (string-split path "/"))
                  (_ (not (null? (cdr tokens))))
                  (id (string->number (cadr tokens))))
         (and id (list id)))))


(define (ticket-reporter+severity path)
  (and (string-prefix? "/ticket/" path)
       (and-let* ((tokens (string-split path "/"))
                  (_ (> (length tokens) 2)))
         (list (cadr tokens)
               (caddr tokens)))))

;; http://host:port/ticket/4
(define-page ticket-reporter+severity
  (lambda (reporter severity)
    `(,(sprintf "Reporter=~a, severity=~a"
                reporter
                severity))))

;; http://host:port/ticket/4/5
(define-page ticket-id
  (lambda (id)
    `("This is ticket " ,id)))


;;
;; Page handler returning a procedure
;;

;; Serving a static file out of the web server documents directory
(define-page "/my-dot-emacs"
  (lambda ()
    (lambda ()
      (parameterize ((root-path (get-environment-variable "HOME")))
        (send-static-file ".emacs"))))
  no-template: #t)
</enscript>


===== {{define-session-page}}
<procedure>(define-session-page path-matcher handlerr . rest)</procedure>

Define a session-aware page.  When the page is accessed and a
corresponding session does not exist, it is created.  If the session
already exists and is not valid, it is recreated.  If the session
already exists and is valid, then it is refreshed.

The {{rest}} parameters are the same as for {{define-page}}.

Here's an example (the [[http://www.paulgraham.com/arcchallenge.html|arc challenge]]):

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define-session-page "said"
  (lambda ()
    (with-request-variables (said)
      (cond (said
             ($session-set! 'said said)
             `(,(link "said" "click here")))
            (($session 'said)
             => (lambda (said)
                  `("You said: " ,said)))
            (else `(,(form '((input (@ (type "text") (name "said")))
                             (input (@ (type "submit"))))
                           action: "said"
                           method: 'post))))))
  method: '(GET POST))
</enscript>


===== {{undefine-page}}
<procedure>(undefine-page path #!optional vhost-root-path)</procedure>

Undefine a page whose path is {{path}} (a string or a regular
expression object).

The optional parameter {{vhost-root-path}} is the path of virtual host
where the page is to be undefined.  If omitted, {{(root-path)}} is
used.



===== {{set-page-title!}}
<procedure>(set-page-title! title)</procedure>

Set the title for the requested page.  This procedure is useful to set
the page title dynamically from the page handler (instead of
statically, via {{define-page}}'s {{title}} keyword parameter).

This procedure has been introduced in awful 0.35.

Example:

<enscript highlight=scheme>
(use awful)

(define-page (main-page-path)
  (lambda ()
    (set-page-title! "a title")
    "Hi!"))
</enscript>



==== Ajax

===== {{ajax}}
<procedure>(ajax path selector event proc #!key target (action 'html) (method 'POST) (arguments '()) success no-session no-db vhost-root-path live on prelude update-targets cache error-handler use-sxml)</procedure>

Generate JavaScript code to be added to the page defined by
{{define-page}}.  Return the generated JavaScript code (which usually
is not useful, so should be discarded).

{{path}} is the URL path (a string) of the server side handler. This
path is placed under the {{(app-root-path)/(ajax-namespace)}} path.
So, if your {{app-root-path}} is {{"my-app"}}, your {{ajax-namespace}}
is {{"ajax"}} and you use {{"do-something"}} as the first argument to
{{ajax}}, the URL for the server side handler would be
{{"/my-app/ajax/do-something"}}.

{{selector}} is the selector for the DOM element to be observed.  If
it is a quoted symbol, awful generates a jQuery selector by DOM id
(e.g., {{'my-selector}} generates {{"#my-selector"}}).  If it is a
string, awful uses it as-is to generate the jQuery selector (e.g.,
{{"input[name^=omg]"}} generates {{"input[name^=omg]"}}).

{{event}} (a quoted symbol or a list) is the event(s) to be
observed. If it is a quoted symbol (e.g., {{'click}}), only this event
will be bound.  If {{event}} is a list of events, all the events from
the list will be bound.

{{proc}} is a no-argument procedure to be executed on the server side.

The {{target}} keyword parameter is the id of the DOM element to be
affected by the result of {{proc}}.

The {{method}} (a quoted symbol, usually {{'GET}} or {{'POST}})
keyword parameter is the HTTP method to be used by the ajax request.

The {{arguments}} keyword parameter is an alist mapping request
variables (symbols) to their values (strings).  {{ajax}} uses these
arguments to assembly the query string or the request body to send to
the server when performing the ajax request.

If {{use-sxml}} is {{#t}}, it specifies that the ajax handler produces
SXML code instead of strings.


Example:

<enscript highlight=scheme>
arguments: '((var1 . "$('#var1').val()")
             (var2 . "$('#var2').val()"))
</enscript>

If the {{no-session}} keyword parameter is {{#t}}, it means that no
session should be considered ({{ajax}} implicit sends the session
identifier when {{no-session}} is {{#f}}).

If the {{no-db}} keyword parameter is {{#t}}, it means that the should
be no attempt to connect the database, even when database usage is
activated by {{enable-db}} and {{db-credentials}} is not {{#f}}.

The {{vhost-root-path}} keyword parameter (a string) is the vhost root
path.  It is useful for explicitly separate pages defined using the
same path (see {{define-page}}) but for different vhosts.

The {{on}} keyword parameter (boolean) indicates whether ajax should
use jQuery's {{on}} method (see [[http://api.jquery.com/on/]]).  If
{{on}} gets bound to {{#t}}, awful will generate code to start
delegating events from the {{document}} DOM element.  If {{on}} gets
bound to a symbol, awful will generate code to start delegating events
from DOM element whose id is the given symbol.  If {{on}} gets bound
to a string, awful will generate code to start delegating events from
DOM element which matches the given string representing a
selector. The {{on}} keyword parameter was introduced in awful 0.39.2.

The {{live}} keyword parameter (boolean) indicates whether ajax should
use jQuery's {{live}} method (see
[[http://api.jquery.com/live/]]). Note that the {{live}} method was
deprecated in jQuery 1.7 and removed in version 1.9.  If you are using
a more recent version of jQuery, see the {{on}} keyword parameter for
{{ajax}} (introduced in awful 0.39.2).

The {{prelude}} keyword parameter (string) is an arbitrary piece of
JavaScript code to be placed right before the ajax request.

The {{update-targets}} keyword parameter a boolean indicating whether
multiple targets should be updated upon ajax response.  When
{{update-targets}} is used, the procedure {{proc}} used as argument to
{{ajax}} should yield an alist as result.  The alist maps DOM elements
identifiers to their corresponding values.

Here's an example:

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define-page (main-page-path)
  (lambda ()

    (ajax "foo" 'foo 'click
          (lambda ()
            '((a . 1) (b . 2) (c . 3)))
          update-targets: #t)

    `(,(link "#" "Click me" id: "foo")
      (div (@ (id "a")))
      (div (@ (id "b")))
      (div (@ (id "c")))))
  use-ajax: #t)
</enscript>

The {{success}} keyword parameter (string) can be any arbitrary
JavaScript code to be executed on the successful ajax request.  The
JavaScript code can assume that a variable {{response}} is bound and
contains the request resulting data.  Here's an example:

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define-page (main-page-path)
  (lambda ()

    (ajax "foo" 'foo "click"
          (lambda ()
            "hey")
          success: "$('#bar').html(response + ' you!')")

    `(,(link "#" "Click me" id: "foo")
      (div (@ (id "bar")))))
  use-ajax: #t)
</enscript>

The {{cache}} keyword parameter (boolean), if set to {{#f}}, it will
force requested pages not to be cached by the browser.  The default
value is not set, leaving it to be set by jQuery. See
[[http://api.jquery.com/jQuery.ajax/|jQuery's documentation]] for
further details.

The {{error-handler}} keyword parameter expects a JavaScript callback
to be used as the error handler for the Ajax request.  See the
{{error}} attribute for the {{settings}} object given as argument to
jQuery.ajax
([[http://api.jquery.com/jQuery.ajax/|http://api.jquery.com/jQuery.ajax/]]).

The {{ajax}} procedure is session, HTTP request and database -aware.


===== {{periodical-ajax}}
<procedure>(periodical-ajax path interval proc #!key target (action 'html) (method 'POST) (arguments '()) success no-session no-db vhost-root-path live on prelude update-targets error-handler use-sxml)</procedure>

Periodically execute {{proc}} on the server side, using
{{(app-root-path)/(ajax-namespace)/path}} as the URL path for the
server side handler.

{{interval}} (a number) is the interval between consecutive executions
of {{proc}}, in milliseconds.

The meaning of the keyword parameters is the same as for {{ajax}}'s.


===== {{ajax-link}}
<procedure>(ajax-link path id text proc #!key target (action 'html) (method 'POST) (arguments '()) success no-session no-db (event 'click) vhost-root-path live on class hreflang type rel rev charset coords shape accesskey tabindex a-target prelude update-targets error-handler use-sxml)</procedure>

A shortcut to

<enscript highlight=scheme>
(begin
  (ajax path id 'click proc ...)
  (<a> href: "#" [...other <a> keyword parameters...] id: id text))
</enscript>

The meaning of the {{target}}, {{action}}, {{method}}, {{arguments}},
{{success}}, {{no-session}}, {{no-db}}, {{event}},
{{vhost-root-path}}, {{update-targets}} {{live}} and {{on}} keyword
parameters is the same as for {{ajax}}'s.

The meaning of the {{class}}, {{hreflang}}, {{type}}, {{rel}},
{{rev}}, {{charset}}, {{coords}}, {{shape}}, {{accesskey}},
{{tabindex}} and {{a-target}} are the same as for
[[/egg/html-tags|html-tags]]' {{<a>}} procedure (except that
{{a-target}} is {{<a>}}'s {{target}}, since {{ajax}} uses the
{{target}} keyword parameter).

The {{event}} keyword parameter syntax is the same for {{ajax}}'s
{{event}} mandatory parameter.


==== Redirection

===== {{redirect-to}}
<procedure>(redirect-to uri)</procedure>

Perform an HTTP redirection (code 302) to the given {{uri}} (either a
string or a [[/eggref/4/uri-common|uri-common]] URI object).  To be
used from {{define-page}} handler.  Example:

<enscript highlight=scheme>
(use awful)

;; / -> /foo
(define-page "/"
  (lambda ()
    (redirect-to "/foo")))

(define-page "/foo"
  (lambda ()
    "foo"))
</enscript>

The example above shows a redirection from {{/}} to {{/foo}}.
Redirections can also be performed when the origin path is a regular
expression:

<enscript highlight=scheme>
(use awful)

;; /bar.* -> /foo
(define-page (regexp "/bar.*")
  (lambda (_)
    (redirect-to "/foo")))

(define-page "/foo"
  (lambda ()
    "foo"))
</enscript>


==== Request handler hooks

Awful provides the possibility of plugin hooks to the request handler,
so that deploying multiple awful applications under the same virtual
host is possible and easy.

===== {{add-request-handler-hook!}}
<procedure>(add-request-handler-hook! hook-id proc)</procedure>

Adds a hook identified by {{id}} (can be used to remove the hook if
necessary). {{proc}} is a two-argument procedure which receives the
requested path and its handler.

Here's a simple usage example:

<enscript highlight=scheme>
(add-request-handler-hook!
 'foo
 (lambda (path handler)
   (when (string-prefix? "/foo" path)
     (parameterize
         ((debug-file "/tmp/foo-debug")
          (enable-ajax #t))
       (handler))))
</enscript>

By using request handlers, you can parameterize parameter values in a
way that they don't affect other applications.

===== {{remove-request-handler-hook!}}
<procedure>(remove-request-handler-hook! hook-id)</procedure>

Removes the request handler hook identified by {{id}}.


==== Web REPL

===== {{enable-web-repl}}
<procedure>(enable-web-repl path #!key css title)</procedure>

Enable the web REPL.  {{path}} is the URL path to the web REPL.

The keyword parameter {{css}} is the CSS to be used the the web REPL
page (see the documentation for {{html-page}}, from the
[[/egg/html-utils|html-utils]] egg, for the {{css}} keyword
parameter.)

The keyword parameter {{title}} (a string) is the title for the web
REPL page (see the documentation for {{html-page}}, from the
[[/egg/html-utils|html-utils]] egg, for the {{title}} keyword
parameter.)

The web REPL is automatically enabled by the awful application server
when the {{--development-mode}} is provided (available from
{{/web-repl}}).  By default, the fancy editor is used, but can be
disabled with the {{--disable-web-repl-fancy-editor}} command line
option for the awful application server.


==== Session inspector

===== {{enable-session-inspector}}
<procedure>(enable-session-inspector path #!key css title)</procedure>

Enable the session inspector.  {{path}} is the URL path to the session
inspector.

The keyword parameter {{css}} is the CSS to be used the the session
inspector page (see the documentation for {{html-page}}, from the
[[/egg/html-utils|html-utils]] egg, for the {{css}} keyword
parameter.)

The keyword parameter {{title}} (a string) is the title for the
session inspector page (see the documentation for {{html-page}}, from
the [[/egg/html-utils|html-utils]] egg, for the {{title}} keyword
parameter.)

The session inspector is automatically enabled by the awful
application server when the {{--development-mode}} is provided
(available from {{/session-inspector}}).


==== Applications

===== {{load-apps}}
<procedure>(load-apps apps)</procedure>

Load the given applications ({{apps}} - a list) (using
[[/man/4/Unit eval#load|load]]).


===== {{reload-apps}}
<procedure>(reload-apps apps)</procedure>

The same as {{load-apps}} but also reseting the resources table (the
thing that maps URIs to procedures) before loading applications.


==== The awful server

===== {{awful-start}}
<procedure>(awful-start thunk #!key dev-mode? port ip-address use-fancy-web-repl? privileged-code))</procedure>

Starts awful.  This procedure is only useful for standalone
applications which intent to embed awful.  For example, the awful
application server (the awful command line tool) uses it.

This procedure does all the listening, switching user/group and
entering the accept loop dance.

{{thunk}} is a procedure to be executed upon starting awful.  It can
be Scheme code just like any other that can be loaded as an awful
application.

{{dev-mode?}} (boolean) indicates whether awful should run in development mode.

{{port}} (integer) indicates to port to bind to.

{{ip-address}} (string) indicates the IP address to bind to.

{{use-fancy-web-repl?}} (boolean): indicates whether the web REPL
should use the fancy editor.

{{privileged-code}} (procedure): a thunk that is executed while awful
is still running with privileged permissions (when run by the
superuser).
