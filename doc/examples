=== Examples

Here are some simple examples using assorted awful features.


==== Number guessing game

A screencast showing this example is available at
[[http://parenteses.org/mario/awful/awful-guess.ogv|http://parenteses.org/mario/awful/awful-guess.ogv]]

This examples shows a simple guessing game. A random number is
generated on the server side and the user tries to guess it.  It shows
some basic ajax features.

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define (prompt-guess)
  '(input (@ (type "text") (id "guess"))))

(define-page (main-page-path)
  (lambda ()
    (ajax "try-guess" 'guess 'change
          (lambda ()
            (let ((guess ($ 'guess as-number))
                  (thinking (random 10)))
              `(p ,(if (and guess (= guess thinking))
                       "You guessed it right!"
                       `("You guessed it wrong. I'm thinking " ,thinking ".")))))
          target: "verdict"
          arguments: '((guess . "$('#guess').val()")))
    `((p "Guess the number I'm thinking:")
      ,(prompt-guess)
      (div (@ (id "verdict")))))
  use-ajax: #t)
</enscript>

To run it, execute:

  $ awful number-guess.scm

(considering you saved the code above in a file called
{{number-guess.scm}}), then access {{http://localhost:8080}}.



==== Sandboxed Chicken Web REPL

It shows how to implement a very simple web-based Chicken REPL using a
sandbox environment (see the
[[/egg/sandbox|sandbox egg]] documentation) for
safe evaluation.

The idea is to have a web page with an input box. Users type the forms
they want to evaluate and submit them to the server. The server
evaluates the given forms in a sandbox environment and return the
results.

Here's the commented code:

<enscript highlight=scheme>
(use awful sandbox)

(enable-sxml #t)

;; Here we define the REPL page.  It uses the session to store the
;; sandboxed environment.  By default, the `main-page-path' parameter
;; value is "/".
(define-session-page (main-page-path)
  (lambda ()

    ;; Create the sandbox environment (if it does not exist yet) and
    ;; store it in the user session.
    (unless ($session 'sandbox-env)
      ($session-set! 'sandbox-env
                     (make-safe-environment
                      parent: default-safe-environment
                      mutable: #t
                      extendable: #t)))

    ;; Here we set an ajax handler for the REPL expressions
    ;; submission.  When users change the REPL input widget (i.e., by
    ;; pressing ENTER), the contents of the text input field are
    ;; submitted and handled by the procedure given as the fourth
    ;; argument to `ajax'.
    (ajax "eval" 'repl-input 'change
          (lambda ()

            ;; This binds the variable `repl-input' from the POST
            ;; method the the `repl-input' Scheme variable
            (let ((repl-input ($ 'repl-input)))

              ;; We'd better handle exceptions when trying to
              ;; evaluate the expressions given by users.
              (handle-exceptions
               exn
               ;; If something goes wrong, we print the error message
               ;; and the call chain.
               `(pre ,(with-output-to-string
                        (lambda ()
                          (print-error-message exn)
                          (print-call-chain))))
               ;; Here we try to evaluate the given expression in the
               ;; sandboxed environment stored in the user session. 
               ;; The `repl-output' page div is updated with the result.
               `(pre ,(safe-eval
                       (with-input-from-string repl-input read)
                       fuel: 100
                       allocation-limit: 100
                       environment: ($session 'sandbox-env))))))

          ;; Here we pass the contents of the text input to the ajax
          ;; handler.  The default HTTP method used by `ajax' is POST.
          arguments: `((repl-input . "$('#repl-input').val()"))

          ;; The output of the ajax handler updates the `repl-output'
          ;; page div.
          target: "repl-output")

    ;; Here's what is displayed to users
    `((h1 "Sandboxed Chicken web REPL")
      (input (@ (type "text") (id "repl-input")))
      (div (@ (id "repl-output")))))

  ;; This tells `define-session-page' to link the page to jQuery
  use-ajax: #t)
</enscript>

To run the code above you'll need to install awful and sandbox:

  $ chicken-install awful sandbox

Then (considering you save the code above in a file called {{web-sandbox.scm}}), run:

  $ awful web-sandbox.scm

and access {{http://localhost:8080}}.


Here are some screenshots of the code above running on Firefox:

[[image:http://gazette.call-cc.org/img/10/web-sandbox.png|Screenshot of the sandboxed web REPL running on Firefox]]

If you try something nasty, the sandbox will abort the evaluation and you'll get an error message and the call chain:

[[image:http://gazette.call-cc.org/img/10/web-sandbox-loop.png|Screenshot of the sandboxed web REPL running on Firefox]]

We can also compile the web application:

 $ csc -s web-sandbox.scm
 $ awful web-sandbox.so


==== Color chooser

Here's an example provided by
[[/users/christian-kellermann|Christian Kellermann]] demonstrating an ajax-based color chooser:

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define color-table
  '("f63353" "fead76" "107279" "10fabc" "1181bf" "120902" "129105"
    "131848" "13a04b" "1427ee" "14a8b1" "1532d4" "15bcf7" "16671a"
    "16c13d" "175b60" "17d583" "186fa6" "18ecc9" "1973ec"))

(define (color-picker counter color)
  `(div (@ (class "color-box")
           (style ,(string-append "background-color: #" color)))
        (input (@ (type "text")
                  (id ,(conc "change-color-" counter))
                  (value ,color)))))

(define (make-color-chooser counter c)
  (ajax "ajax" (conc "#change-color-" counter) 'change
        (lambda ()
          (let ((color (or ($ 'color) c))
                (counter ($ 'counter)))
            (color-picker counter color)))
        target: (conc "color-box-" counter)
        arguments: `((color . ,(conc  "$('#change-color-" counter "').val()"))
                     (counter . ,counter))
        live: #t)
  `(div (@ (id ,(conc "color-box-" counter)))
        ,(color-picker counter c)))

(define-page (main-page-path)
  (lambda ()
    (map (let ((counter -1))
           (lambda (c)
             (set! counter (add1 counter))
             (make-color-chooser counter c)))
         color-table))
  use-ajax: #t)
</enscript>

Here's a screenshot:

[[image:http://parenteses.org/mario/img/awful/color-chooser.png|Awful color chooser]]

To run this example (considering you save the code above in a file called {{color-chooser.scm}}):

  $ awful color-chooser.scm

then access {{http://localhost:8080}}.  You can change the colors by
editing the input boxes then pressing enter.


==== Fortune server

This example is a fortune server in awful.  It demonstrates some handy
awful features like database access and ajax.  You'll need the
[[/egg/awful-sql-de-lite|awful-sql-de-lite]]
egg and its dependencies (which should be automatically installed by
{{chicken-install}}).

Here are instructions to install and use it:

1. Install [[/egg/awful-sql-de-lite|awful-sql-de-lite]]

   $ chicken-install awful-sql-de-lite


2. Create the fortunes database (see the code below):

   $ csi -s create-database.scm


3. Run the fortune server (see the code below):

   $ awful fortune-server.scm


Here's the code for {{create-database.scm}} which creates and populates the fortune database:

<enscript highlight=scheme>
(use sql-de-lite posix)

(define fortunes
  '(("Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it."
     "Brian Kernighan")
    ("In order to understand recursion, one must first understand recursion.")
    ("If debugging is the process of removing software bugs, then programming must be the process of putting them in."
     "Edsger Dijkstra")
    ("Controlling complexity is the essence of computer programming."
     "Brian Kernigan")
    ("The function of good software is to make the complex appear to be simple."
     "Grady Booch")
    ("That's the thing about people who think they hate computers.  What they really hate is lousy programmers."
     "Larry Niven")
    ("First learn computer science and all the theory.  Next develop a programming style.  Then forget all that and just hack."
    "George Carrette")
    ("To iterate is human, to recurse divine."
    "L. Peter Deutsch")
    ("The best thing about a boolean is even if you are wrong, you are only off by a bit.")
    ("Optimism is an occupational hazard of programming; feedback is the treatment."
     "Kent Beck")
    ("Simplicity is prerequisite for reliability."
     "Edsger W. Dijkstra")
    ("Simplicity is the ultimate sophistication."
     "Leonardo da Vinci")
    ("The unavoidable price of reliability is simplicity."
     "C.A.R. Hoare")
    ("The ability to simplify means to eliminate the unnecessary so that the necessary may speak."
     "Hans Hoffmann")
    ("Simplicity is hard to build, easy to use, and hard to charge for. Complexity is easy to build, hard to use, and easy to charge for."
     "Chris Sacca")))

(delete-file* "fortunes.db")

(let ((db (open-database "fortunes.db")))
  (exec (sql db "create table fortunes(sentence text, author text)"))
  (for-each (lambda (fortune)
              (let* ((sentence (car fortune))
                     (author (cdr fortune))
                     (statement
                      (string-append
                       "insert into fortunes (sentence, author) values (?,?)")))
                (exec (sql db statement)
                      sentence
                      (if (null? author) "" (car author)))))
            fortunes)
  (close-database db))
</enscript>

Here's the code for the fortune server:

<enscript highlight=scheme>
(use awful awful-sql-de-lite)

(enable-sxml #t)
(enable-db)
(db-credentials "fortunes.db")

(define (random-fortune)
  (car ($db "select sentence, author from fortunes order by random() limit 1")))

(define-page (main-page-path)
  (lambda ()
    (ajax "new-fortune" 'new-fortune 'click
          (lambda ()
            (let ((fortune (random-fortune)))
              `((sentence . ,(car fortune))
                (author . ,(cadr fortune)))))
          update-targets: #t)

    `(div (@ (id "content"))
          (div (@ (id "sentence"))
               "Click the button below to get a new fortune")
          (div (@ (id "author")))
          (button (@ (id "new-fortune")) "New fortune")))
  css: "fortune.css"
  use-ajax: #t
  charset: "utf-8")
</enscript>


The contents of the {{fortune.css}} file are:

<enscript highlight=css>
body
{ font-family: arial, verdana, sans-serif;
}

#sentence
{ width: 20em;
  background-color: #DEE7EC;
  padding: 6px;
  min-height: 7em;
}

#author
{ width: 20em;
  min-height: 2em;
  padding: 6px;
  background-color: #eee;
}
</enscript>

Here's a screenshot:

[[image:http://parenteses.org/mario/img/awful/fortune-server.png|Awful fortune server]]


==== I-wonder

I-wonder is a simple awful example application which uses SQLite as
storage (with the [[/egg/sql-de-lite|sql-de-lite]] egg).

You can find the code for that application on GitHub: [[https://github.com/mario-goulart/i-wonder|https://github.com/mario-goulart/i-wonder]]

Here's a screenshot

[[image:http://parenteses.org/mario/img/awful/i-wonder.png|I-wonder]]
